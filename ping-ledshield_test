/* Ping))) Sensor

   This sketch reads a PING))) ultrasonic rangefinder and returns the
   distance to the closest object in range. To do this, it sends a pulse
   to the sensor to initiate a reading, then listens for a pulse
   to return.  The length of the returning pulse is proportional to
   the distance of the object from the sensor.

   The circuit:
    * +V connection of the PING))) attached to +5V
    * GND connection of the PING))) attached to ground
    * SIG connection of the PING))) attached to digital pin 7

   http://www.arduino.cc/en/Tutorial/Ping

   created 3 Nov 2008
   by David A. Mellis
   modified 30 Aug 2011
   by Tom Igoe

   This example code is in the public domain.

 */

 #include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
#define PIN            6

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      40

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

// this constant won't change.  It's the pin number
// of the sensor's output:
const int pingPin = 7;

void setup() {

  // initialize serial communication:
  Serial.begin(9600);
  pixels.begin(); // This initializes the NeoPixel library.
}

void loop() {
  // establish variables for duration of the ping,
  // and the distance result in inches and centimeters:
  long duration, inches, cm;

  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  pinMode(pingPin, OUTPUT);
  digitalWrite(pingPin, LOW);
  delayMicroseconds(2);
  digitalWrite(pingPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pingPin, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH
  // pulse whose duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(pingPin, INPUT);
  duration = pulseIn(pingPin, HIGH);

  // convert the time into a distance
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);

 
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();

  switch(cm){
    case 40 :     
    case 39 :
    case 38 :
    case 37 :
    case 36 :     pixels.setPixelColor(3, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(11, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(19, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(27, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(35, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(2, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(10, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(18, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(26, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(34, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(1, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(9, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(17, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(25, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(33, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(0, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(8, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(16, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(24, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(32, pixels.Color(0,20,0)); // Moderately bright green color.
                   pixels.show(); // This sends the updated pixel color to the hardware.
              break;
    case 35 : 
    case 34 :
    case 33 :
    case 32 :
    case 31 :     pixels.setPixelColor(3, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(11, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(19, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(27, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(35, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(2, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(10, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(18, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(26, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(34, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(0, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(8, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(16, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(24, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(32, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(1, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(9, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(17, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(25, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(33, pixels.Color(0,20,0)); // Moderately bright green color.
                   pixels.show(); // This sends the updated pixel color to the hardware.
                  break;   
    case 30 :     
    case 29 :
    case 28 :
    case 27 :
    case 26 :     pixels.setPixelColor(3, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(11, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(19, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(27, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(35, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(1, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(9, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(17, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(25, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(33, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(0, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(8, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(16, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(24, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(32, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(2, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(10, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(18, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(26, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(34, pixels.Color(0,20,0)); // Moderately bright green color.
                   pixels.show(); // This sends the updated pixel color to the hardware.
              break; 
    case 24 :
    case 23 :
    case 22 :
    case 21 :     pixels.setPixelColor(1, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(9, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(17, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(25, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(33, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(0, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(8, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(16, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(24, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(32, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(2, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(10, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(18, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(26, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(34, pixels.Color(0,0,0)); // Moderately bright green color.
                  pixels.setPixelColor(3, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(11, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(19, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(27, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.setPixelColor(35, pixels.Color(0,20,0)); // Moderately bright green color.
                  pixels.show(); // This sends the updated pixel color to the hardware.
                  break;
          
    }

  delay(100);
}

long microsecondsToInches(long microseconds) {
  // According to Parallax's datasheet for the PING))), there are
  // 73.746 microseconds per inch (i.e. sound travels at 1130 feet per
  // second).  This gives the distance travelled by the ping, outbound
  // and return, so we divide by 2 to get the distance of the obstacle.
  // See: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
  return microseconds / 74 / 2;
}

long microsecondsToCentimeters(long microseconds) {
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the
  // object we take half of the distance travelled.
  return microseconds / 29 / 2;
}
